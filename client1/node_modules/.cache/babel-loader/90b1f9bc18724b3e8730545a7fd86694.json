{"ast":null,"code":"var _jsxFileName = \"W:\\\\react\\\\projects\\\\streams\\\\client\\\\src\\\\components\\\\GoogleAuth.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignedIn: null\n    };\n\n    this.onAuthChange = isSignedIn => {\n      // this.setState({ isSignedIn: this.auth.isSignedIn.get()});\n      if (isSignedIn) {\n        this.props.signIn();\n      } else {\n        this.props.signOut();\n      }\n    };\n\n    this.onSignInClick = () => {\n      this.auth.signIn(123);\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n  }\n\n  // we wired gspi library to project, we loaded some additional code to library,\n  // then we initialized some authencation with our client Id and ask for a scope o email\n  componentDidMount() {\n    window.gapi.load('client:auth2', () => {\n      window.gapi.client.init({\n        clientId: '113713252572-di6n1i8g3stgpl145tq1ujluka5j4fin.apps.googleusercontent.com',\n        scope: 'email'\n      }).then(() => {\n        this.auth = window.gapi.auth2.getAuthInstance();\n        this.onAuthChange(this.auth.isSignedIn.get());\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onSignOutClick,\n        className: \"ui red google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), \"signOut\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onSignInClick,\n        className: \"ui green google button\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), \"sign in\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn: signIn,\n  signOut: signOut\n})(GoogleAuth);","map":{"version":3,"sources":["W:/react/projects/streams/client/src/components/GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","Component","state","isSignedIn","onAuthChange","props","onSignInClick","auth","onSignOutClick","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","get","listen","renderAuthButton","render","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,YAAhC;;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAD6B;;AAAA,SAgBrCC,YAhBqC,GAgBrBD,UAAD,IAAgB;AAC3B;AACA,UAAIA,UAAJ,EAAgB;AACZ,aAAKE,KAAL,CAAWP,MAAX;AACH,OAFD,MAEO;AACH,aAAKO,KAAL,CAAWN,OAAX;AACH;AACJ,KAvBoC;;AAAA,SAyBrCO,aAzBqC,GAyBrB,MAAM;AAClB,WAAKC,IAAL,CAAUT,MAAV,CAAiB,GAAjB;AACH,KA3BoC;;AAAA,SA6BrCU,cA7BqC,GA6BpB,MAAM;AACnB,WAAKD,IAAL,CAAUR,OAAV;AACH,KA/BoC;AAAA;;AAErC;AACA;AACAU,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAM;AACnCF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CAAmBC,IAAnB,CACC;AAACC,QAAAA,QAAQ,EAAC,0EAAV;AAAsFC,QAAAA,KAAK,EAAE;AAA7F,OADD,EAECC,IAFD,CAEM,MAAM;AACR,aAAKV,IAAL,GAAYG,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ;AACA,aAAKf,YAAL,CAAkB,KAAKG,IAAL,CAAUJ,UAAV,CAAqBiB,GAArB,EAAlB;AACA,aAAKb,IAAL,CAAUJ,UAAV,CAAqBkB,MAArB,CAA4B,KAAKjB,YAAjC;AACH,OAND;AAOH,KARD;AASH;;AAmBDkB,EAAAA,gBAAgB,GAAE;AACd,QAAG,KAAKjB,KAAL,CAAWF,UAAX,KAA0B,IAA7B,EAAkC;AAC9B,aAAO,IAAP;AACH,KAFD,MAGK,IAAG,KAAKE,KAAL,CAAWF,UAAd,EAAyB;AAC1B,0BACA;AAAQ,QAAA,OAAO,EAAE,KAAKK,cAAtB;AAAsC,QAAA,SAAS,EAAC,sBAAhD;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAIH,KALI,MAMD;AACA,0BACA;AAAQ,QAAA,OAAO,EAAE,KAAKF,aAAtB;AAAqC,QAAA,SAAS,EAAC,wBAA/C;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAIH;AACJ;;AAEDiB,EAAAA,MAAM,GAAG;AACL,wBACA;AAAA,gBAAM,KAAKD,gBAAL;AAAN;AAAA;AAAA;AAAA;AAAA,YADA;AAGH;;AAvDoC;;AAwDxC;;AAED,MAAME,eAAe,GAAItB,KAAD,IAAW;AAC/B,SAAO;AAAEC,IAAAA,UAAU,EAAED,KAAK,CAACK,IAAN,CAAWJ;AAAzB,GAAP;AACH,CAFD;;AAIA,eAAeN,OAAO,CAAC2B,eAAD,EAClB;AACI1B,EAAAA,MAAM,EAACA,MADX;AAEIC,EAAAA,OAAO,EAACA;AAFZ,CADkB,CAAP,CAIRC,UAJQ,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signIn, signOut } from '../actions'\r\n\r\nclass GoogleAuth extends React.Component {\r\n    state = { isSignedIn: null}\r\n    // we wired gspi library to project, we loaded some additional code to library,\r\n    // then we initialized some authencation with our client Id and ask for a scope o email\r\n    componentDidMount(){\r\n        window.gapi.load('client:auth2', () => {\r\n            window.gapi.client.init\r\n            ({clientId:'113713252572-di6n1i8g3stgpl145tq1ujluka5j4fin.apps.googleusercontent.com', scope: 'email'})\r\n            .then(() => {\r\n                this.auth = window.gapi.auth2.getAuthInstance();\r\n                this.onAuthChange(this.auth.isSignedIn.get());\r\n                this.auth.isSignedIn.listen(this.onAuthChange);\r\n            });\r\n        });\r\n    };\r\n\r\n    onAuthChange = (isSignedIn) => {\r\n        // this.setState({ isSignedIn: this.auth.isSignedIn.get()});\r\n        if (isSignedIn) {\r\n            this.props.signIn();\r\n        } else {\r\n            this.props.signOut();\r\n        }\r\n    };\r\n    \r\n    onSignInClick = () => {\r\n        this.auth.signIn(123);\r\n    };\r\n\r\n    onSignOutClick = () => {\r\n        this.auth.signOut();\r\n    };\r\n\r\n    renderAuthButton(){\r\n        if(this.props.isSignedIn === null){\r\n            return null;\r\n        }\r\n        else if(this.props.isSignedIn){\r\n            return (\r\n            <button onClick={this.onSignOutClick} className=\"ui red google button\">\r\n                <i className=\"google icon\" />signOut\r\n            </button>)\r\n        }\r\n        else{\r\n            return (\r\n            <button onClick={this.onSignInClick} className=\"ui green google button\">\r\n                <i className=\"google icon\" />sign in\r\n            </button>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>{this.renderAuthButton()}</div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { isSignedIn: state.auth.isSignedIn}\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        signIn:signIn,\r\n        signOut:signOut\r\n    })(GoogleAuth);\r\n"]},"metadata":{},"sourceType":"module"}