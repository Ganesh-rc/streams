{"ast":null,"code":"var _jsxFileName = \"W:\\\\react\\\\projects\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form'; // Field is supposed to be a react component that we will eventually show on screen - s0, capital\n// reduxForm is a function \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this);\n    }\n  } // meta property from formProps is related to validate function\n\n\n  renderInput({\n    input,\n    label,\n    meta\n  }) {\n    // console.log(meta);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [label, \" : \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), (this, renderError(meta))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this);\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"you must enter a title\";\n  }\n\n  ;\n\n  if (!formValues.description) {\n    errors.description = \"you must enter a description\";\n  }\n\n  ;\n  return errors;\n}; // reduxForm generates allows us to use formState in forComponent\n// reduxForm will return a function we immediately call that function with streamCreate\n// reduxForm only takes one single object.\n// form : formName \n\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["W:/react/projects/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","formValues","reduxForm","StreamCreate","Component","renderError","error","touched","renderInput","input","label","meta","onSubmit","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,YAA7C,C,CACA;AACA;;;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA0C;AACtCC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAF,EAAqB;AAC5B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB,0BACA;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADA;AAIH;AACJ,GARqC,CAUtC;;;AACAE,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,EAAuB;AAC9B;AACA,wBACA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAA,mBAAQD,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,sBAAWD;AAAX;AAAA;AAAA;AAAA;AAAA,cAFJ,GAGK,MAAKJ,WAAW,CAACM,IAAD,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAMH;;AAEDC,EAAAA,QAAQ,CAACX,UAAD,EAAY;AAChBY,IAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACH;;AAEDc,EAAAA,MAAM,GAAE;AACJ,wBACA;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKL,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,SAAlE;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKJ,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAOH;;AAjCqC;;AAkCzC;;AAED,MAAMU,QAAQ,GAAIjB,UAAD,IAAgB;AAC7B,QAAMkB,MAAM,GAAG,EAAf;;AACA,MAAI,CAAClB,UAAU,CAACmB,KAAhB,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAAA;;AACD,MAAI,CAACnB,UAAU,CAACoB,WAAhB,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAAA;AACD,SAAOF,MAAP;AACH,CATD,C,CAWA;AACA;AACA;AACA;;;AACA,eAAejB,SAAS,CAAC;AACrBoB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React from 'react';\r\nimport { Field, formValues, reduxForm } from 'redux-form';\r\n// Field is supposed to be a react component that we will eventually show on screen - s0, capital\r\n// reduxForm is a function \r\n\r\nclass StreamCreate extends React.Component{\r\n    renderError( { error, touched} ){\r\n        if (touched && error ){\r\n            return(\r\n            <div className=\"ui error message\">\r\n                <div className=\"header\"></div>\r\n            </div>);\r\n        }\r\n    }\r\n\r\n    // meta property from formProps is related to validate function\r\n    renderInput({input, label, meta}) {\r\n        // console.log(meta);\r\n        return (\r\n        <div className=\"field\">\r\n            <label>{label} : </label>\r\n            <input {...input}/>\r\n            {this,renderError(meta)}\r\n        </div>)\r\n    }\r\n\r\n    onSubmit(formValues){\r\n        console.log(formValues);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\r\n            <Field name=\"title\" component={this.renderInput} label=\"Enter Title\"/>\r\n            <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n            <button className=\"ui button primary\">Submit</button>\r\n        </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst validate = (formValues) => {\r\n    const errors = {};\r\n    if (!formValues.title){\r\n        errors.title = \"you must enter a title\"\r\n    };\r\n    if (!formValues.description){\r\n        errors.description = \"you must enter a description\"\r\n    }; \r\n    return errors;\r\n};\r\n\r\n// reduxForm generates allows us to use formState in forComponent\r\n// reduxForm will return a function we immediately call that function with streamCreate\r\n// reduxForm only takes one single object.\r\n// form : formName \r\nexport default reduxForm({\r\n    form: 'streamCreate',\r\n    validate: validate\r\n})(StreamCreate);\r\n"]},"metadata":{},"sourceType":"module"}