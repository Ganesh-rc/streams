{"ast":null,"code":"var _jsxFileName = \"W:\\\\react\\\\projects\\\\streams\\\\client1\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form'; // Field is supposed to be a react component that we will eventually show on screen - s0, capital\n// reduxForm is a function \n\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      // console.log(meta);\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [label, \" : \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this);\n    }\n  } // meta property from formProps is related to validate function\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"you must enter a title\";\n  }\n\n  ;\n\n  if (!formValues.description) {\n    errors.description = \"you must enter a description\";\n  }\n\n  ;\n  return errors;\n}; // reduxForm generates allows us to use formState in forComponent\n// reduxForm will return a function we immediately call that function with streamCreate\n// reduxForm only takes one single object.\n// form : formName \n\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream: createStream\n})(formWrapped);","map":{"version":3,"sources":["W:/react/projects/streams/client1/src/components/streams/StreamCreate.js"],"names":["React","Field","formValues","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,YAA7C,C,CACA;AACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;;AAEA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA0C;AAAA;AAAA;;AAAA,SAWtCC,WAXsC,GAWxB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACpC;AACA,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA,0BACA;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA,gCACI;AAAA,qBAAQF,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,sBAAWD;AAAX;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKM,WAAL,CAAiBJ,IAAjB,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAMH,KApBqC;;AAAA,SAsBtCK,QAtBsC,GAsB1Bd,UAAD,IAAgB;AACvB,WAAKe,KAAL,CAAWZ,YAAX,CAAwBH,UAAxB;AACH,KAxBqC;AAAA;;AACtCa,EAAAA,WAAW,CAAE;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAF,EAAqB;AAC5B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AAClB,0BACA;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADA;AAIH;AACJ,GARqC,CAUtC;;;AAgBAK,EAAAA,MAAM,GAAE;AACJ,wBACA;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKH,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,QAAA,KAAK,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAOH;;AAlCqC;;AAmCzC;;AAED,MAAMY,QAAQ,GAAIlB,UAAD,IAAgB;AAC7B,QAAMmB,MAAM,GAAG,EAAf;;AACA,MAAI,CAACnB,UAAU,CAACoB,KAAhB,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAAA;;AACD,MAAI,CAACpB,UAAU,CAACqB,WAAhB,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAAA;AACD,SAAOF,MAAP;AACH,CATD,C,CAWA;AACA;AACA;AACA;;;AACA,MAAMG,WAAW,GAAGrB,SAAS,CAAC;AAC1BsB,EAAAA,IAAI,EAAE,cADoB;AAE1BL,EAAAA,QAAQ,EAAEA;AAFgB,CAAD,CAAT,CAGjBd,YAHiB,CAApB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAO;AACzBC,EAAAA,YAAY,EAAEA;AADW,CAAP,CAAP,CAEZmB,WAFY,CAAf","sourcesContent":["import React from 'react';\r\nimport { Field, formValues, reduxForm } from 'redux-form';\r\n// Field is supposed to be a react component that we will eventually show on screen - s0, capital\r\n// reduxForm is a function \r\nimport { connect } from 'react-redux';\r\nimport { createStream } from '../../actions'\r\n\r\nclass StreamCreate extends React.Component{\r\n    renderError( { error, touched} ){\r\n        if (touched && error ){\r\n            return(\r\n            <div className=\"ui error message\">\r\n                <div className=\"header\">{error}</div>\r\n            </div>);\r\n        }\r\n    }\r\n\r\n    // meta property from formProps is related to validate function\r\n    renderInput = ({input, label, meta}) => {\r\n        // console.log(meta);\r\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\r\n        return (\r\n        <div className={className}>\r\n            <label>{label} : </label>\r\n            <input {...input}/>\r\n            {this.renderError(meta)}\r\n        </div>)\r\n    }\r\n\r\n    onSubmit = (formValues) => {\r\n        this.props.createStream(formValues);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\r\n            <Field name=\"title\" component={this.renderInput} label=\"Enter Title\"/>\r\n            <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n            <button className=\"ui button primary\">Submit</button>\r\n        </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst validate = (formValues) => {\r\n    const errors = {};\r\n    if (!formValues.title){\r\n        errors.title = \"you must enter a title\"\r\n    };\r\n    if (!formValues.description){\r\n        errors.description = \"you must enter a description\"\r\n    }; \r\n    return errors;\r\n};\r\n\r\n// reduxForm generates allows us to use formState in forComponent\r\n// reduxForm will return a function we immediately call that function with streamCreate\r\n// reduxForm only takes one single object.\r\n// form : formName \r\nconst formWrapped = reduxForm({\r\n    form: 'streamCreate',\r\n    validate: validate\r\n})(StreamCreate);\r\n\r\nexport default connect(null, {\r\n    createStream: createStream\r\n})(formWrapped);"]},"metadata":{},"sourceType":"module"}